<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Nunito" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
</head>

<style>
    .homepage *,
    .homepage *::before,
    .homepage *::after {
        box-sizing: border-box;
    }

    /* Body styles */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #FFF1E4;
        display: flex;
        align-items: center;
        flex-direction: column;
        height: 20vh;
        margin: 0;
    }
    .header-homepage {
        display: flex;
        flex-direction: column;
        align-items: center;
        
    }
    /* Welcome section styles */
    .welcome-section-homepage {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        flex-direction: row;
    }

    #createTaskButton {
            width: 10rem;
            height: 4rem;
            border-radius: 0.25rem;
            background: #FE4451;
            color: var(--colors-base-base-100, #FFF);
            text-align: center;
            font-size: 24px;
            font-weight: 700;
            line-height: normal;
    }
    /* Text section styles */
    .text-section-homepage {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .welcome-left {
        display: flex;
        height: 100%;
        flex-direction: column;
        align-items: center;
    }


    /* Header styles */
    .text-section-homepage h1 {
        color: #2E2640;
        text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
        font-size: 60px;
        margin: 0px;
        font-family: 'Poppins', sans-serif;
        font-weight: 650;
    }

    /* Paragraph styles */
    .text-section-homepage p {
        color: #2E2640;
        text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
        font-size: 30px;
        font-weight: 400;
        letter-spacing: 0.3px;
        margin: 0px;
        font-family: 'Poppins', sans-serif;
    }

    /* Team average container styles */
    .team-average-container-homepage {
        width: 100%;
        max-width: 500px;
        background-color: #FFFFFF;
        padding: 10px;
        position: relative;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin-left: -4rem;
    }

    /* Team average container h2 styles */
    .team-average-container-homepage h2 {
        font-size: 2rem;
        margin-bottom: 25px;
        margin-top: -5px;
        color: #2E2640;
    }

    /* Team average styles */
    .team-average-homepage {
        display: flex;
        justify-content: space-around;
        margin-top: 10px;
    }

    /* Emoji images for team mood evaluation */
    .team-average-homepage img {
        width: 60px;
        height: 60px;
    }

    /* Map image in the welcome section */
    .map-image-homepage {
        width: 50%;
        max-width: 800px;
    }

    /* Slider for team average */
    input[type='range-homepage'] {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        width: 85%;
        margin: 0;
        padding: 0;
        background: transparent;
        margin-top: 1.5rem;
        margin-bottom: 1.5rem;
    }

    input[type='range-homepage']:disabled {
        opacity: 1;
    }

    /* Slider styles */
    .range-style-homepage {
        width: 85%;
        height: 10px;
        background: #e0e0e0;
        border-radius: 10px;
        position: relative;
        box-shadow: -2px -2px 5px #ffffff,
                    2px 2px 5px rgba(0, 0, 0, 0.2),
                    inset 2px 2px 5px rgba(0, 0, 0, 0.2),
                    inset -2px -2px 5px #ffffff;
    }

    .range-style-homepage::-webkit-slider-runnable-track,
    .range-style-homepage::-moz-range-track {
        width: 100%;
        height: 10px;
        background: #e0e0e0;
        border-radius: 10px;
        box-shadow: inset 2px 2px 5px rgba(0, 0, 0, 0.2),
                    inset -2px -2px 5px #ffffff;
    }

    .range-style-homepage::-webkit-slider-thumb,
    .range-style-homepage::-moz-range-thumb {
        width: 30px;
        height: 30px;
        background: #2E2640;
        border-radius: 50%;
        cursor: not-allowed;
        box-shadow: -2px -2px 5px #ffffff,
                    2px 2px 5px rgba(0, 0, 0, 0.2);
        margin-top: -11px;
    }

    /* Team section styles */
    .team-section-homepage {
        text-align: center;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        margin-top: -3.5rem;
        height: 80%;
    }

    /* Team section h2 styles */
    .team-section-homepage h2 {
        font-size: 2rem;
        color: #2E2640;
        margin: 0em 2em 0em;
    }

    /* Team members styles */
    .team-members-homepage {
        display: flex;
        justify-content: center;
        margin-top: 2em;
        align-items: center;
        width: 100%;
    }

    /* Member styles */
    .member-homepage {
        position: relative;

    }

    .profile-pic-homepage img {
    width: 155px;
    height: 155px;
    border-radius: 50%;
    }
    /* Profile pic styles */
    .profile-pic-homepage {
        width: 155px;
        height: 155px;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        border: 3px solid transparent;
        position: relative;
        margin-top: 0rem;
    }

    .member-name {
    position: absolute;
    bottom: 10px; /* Adjust as needed */
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    padding: 5px 10px;
    font-size: 14px;
    opacity: 0;
    transition: opacity 0.3s ease;
    }

    .profile-pic-homepage:hover .member-name {
    opacity: 1;
    }

    .profile-pic-homepage.online {
        border-color: #4CAF50;
    }

    .profile-pic-homepage.busy {
        border-color: #F44336;
    }

    .profile-pic-homepage.offline {
        border-color: #989898;
    }

    .profile-pic-homepage::after {
        content: attr(title);
        position: absolute;
        bottom: -25px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #2E2640;
        color: #FFF;
        padding: 5px 10px;
        border-radius: 5px;
        white-space: nowrap;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .member-homepage:hover .profile-pic-homepage::after {
        opacity: 1;
        visibility: visible;
    }

    /* Team background styles */
    .team-background2-homepage,
    .team-background-homepage {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        z-index: -2;
    }

    .team-background2-homepage {

        width: 80em;
        height: 40em;
    }

    .team-background-homepage {
        width: 100%;
        max-width: 1150px;
        height: 30rem;
        z-index: -1;
    }

    /* Tasks section styles */
    .tasks-section-homepage {
        width: 97%;
        height: 30rem;
        margin-top: 12rem;
        margin-bottom: 5rem;
        margin-left: -0.1rem;
        border-radius: var(--typography-line-height-leading-5, 20px);
        background: #F7F4F2;
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
        position: relative;

    }

    /* Task item styles */
    .task-item-homepage {
        justify-content: space-between;
        width: 76rem;
        height: 2rem;
        margin-top: 1rem;
        padding: 1rem;
        border-radius: 1rem;
        background: #ffffff;
        display: flex;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        font-size: 18px;
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
    }

    /* Task section h2 styles */
    .tasks-section-homepage h2 {
        color: #2E2640;
        font-family: Poppins;
        font-size: 30px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        letter-spacing: 0.3px;
        text-align: center;
        margin-top: 2px;
        align-items: center;
        
    }

    /* Task buttons styles */
    .task-buttons-homepage {
        position: relative;
        margin-top: 2em;
        display: flex;
        width: 78em;
        height: 64px;
        bottom: 1rem;
        justify-content: center;
    }

    button.task-button-homepage {
        padding: 12px 24px;
        margin: 10px;
        font-size: 16px;
        font-weight: bold;
        color: #FFF;
        background-color: #2E2640;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .task-buttons-homepage button:hover {
        background-color: #6D5D7A;
    }

    .task-list-homepage {
        margin-left: 2px;
    }

    /* Button styles in the task buttons section */
    #createTaskButton {
    width: 3px;
    height: 6px;
    border-radius: 0.20rem;
    padding: 1rem;
    border: none;
    background: #ffffff;
    color: var(--colors-base-base-100, #FE4451);
    text-align: center;
    font-size: 30px;
    font-weight: 700;
    line-height: normal;
    cursor: pointer;
    position: relative;
    top: -9%;
    left: 6%;
    
    display: flex;
    justify-content: center;
    align-items: center;
    }


    #createTaskButton:hover {
        background-color: #d43b43;
    }

    /* Delete task button styles */
    .delete-task-button-homepage,
    .update-task-button-homepage {
        border: none;
        border-radius: 1rem;
        background-color: #FE4451;
        padding: 0.4rem;
        font-family: 'Poppins';
        font-weight: 500;
        cursor: pointer;
        color: #fefefe;
    }

    .delete-task-button-homepage:hover {
        background-color: #d43b43;
    }

    .update-task-button-homepage:hover {
        background-color: #d43b43;
    }

    /* Task section background styles */
    .tasks-bg-homepage {
        width: 1275px;
        height: 418.92px;
        flex-shrink: 0;
        border-radius: var(--typography-line-height-leading-5, 20px);
        background: #F7F4F2;
    }

    /* Header bar styles for cards */
    .cabecario-cards-homepage {
        width: 100%;
        height: 46.427px;
        flex-shrink: 0;
        border-radius: var(--typography-line-height-leading-5, 20px) var(--typography-line-height-leading-5, 20px) 0px 0px;
        background: #FE4451;
    }

    /* Modal overlay for task creation */
    .modal-homepage {
        display: none;
        /* Hidden by default */
        position: fixed;
        /* Stay in place */
        z-index: 1;
        /* Sit on top */
        left: 0;
        top: 0;
        width: 100%;
        /* Full width */
        height: 100%;
        /* Full height */
        overflow: auto;
        /* Enable scroll if needed */
        background-color: rgb(0, 0, 0);
        /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4);
        /* Black w/ opacity */
        padding-top: 60px;
    }

    /* Modal content styles for task creation */
    .modal-content-homepage {
        width: 1078px;
        height: 556px;
        background-color: #fefefe;
        margin: 5% auto;
        /* 15% from the top and centered */
        padding: 2rem;
        border-radius: var(--typography-line-height-leading-5, 20px);
        width: 80%;
        /* Could be more or less, depending on screen size */
    }

    /* Input styles for modal task creation */
    .modal-content-homepage input {
        width: 1010px;
        height: 50px;
        flex-shrink: 0;
        border-radius: 30px;
        background: var(--colors-base-base-100, #FFF);
        font-size: 26px;
        padding-left: 1rem;
    }

    /* Label styles for modal task creation */
    .modal-content-homepage label {
        color: #000;
        text-align: center;
        font-size: 20px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
    }

    #taskTitle,
    #taskDescription {
        margin-top: 1rem;
    }

    /* Button styles for modal task creation */
    .modal-content-homepage button {
        width: 153px;
        height: 40px;
        flex-shrink: 0;
        border-radius: var(--typography-line-height-leading-5, 20px);
        background: #FE4451;
        color: var(--colors-base-base-100, #FFF);
        border: none;
        margin-top: 2rem;
        cursor: pointer;
        text-align: center;
        font-size: 20px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
    }

    .modal-content-homepage button:hover {
        background-color: #d43b43;
    }

    /* Close button styles for modal */
    .close-homepage {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close-homepage:hover,
    .close-homepage:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>

<body>
    <div class="header-homepage" id="header">

        <!-- Welcome section -->
        <div class="welcome-section-homepage">
            <div class="welcome-left">
                <div class="text-section-homepage">
                    <h1>Welcome, <%= user.firstName %>!</h1>
                    <p>Let's go on this multicultural adventure!</p>
                </div>
            
                <!-- Team average -->
                <div class="team-average-container-homepage">
                    <h2>Your team average</h2>
                    <div class="team-average-homepage">
                        <img src="/images/vsad.svg" alt="Very Sad">
                        <img src="/images/sss.svg" alt="Sad">
                        <img src="/images/neutral.svg" alt="Neutral">
                        <img src="/images/hpy.svg" alt="Happy">
                        <img src="/images/vhappy.svg" alt="Very Happy">
                    </div>
                    <input type="range" class="range-style-homepage" min="0" max="4" step="1" id="customRange" value="<%= averageHappiness ? averageHappiness : 0 %>" disabled>
                </div>
            </div>
            

            <img src="images/mapahp.svg" alt="Map" class="map-image-homepage">
        </div>
    
        <section class="team-section-homepage">
            <h2>Your team members</h2>
            <div class="team-members-homepage">
                <% if (teamMembers && teamMembers.length > 0) { %>
                    <% teamMembers.slice(0, 7).forEach(member => { %>
                        <div class="member-homepage">
                            <div class="profile-pic-homepage
                                <% if (member && member.status === 'online') { %> online
                                <% } else if (member && member.status === 'busy') { %> busy
                                <% } else { %> offline <% } %>" title="<%= member && member.status ? member.status.charAt(0).toUpperCase() + member.status.slice(1) : '' %>">
                                <a href="/profileG/<%= member.id_user.id %>">
                                <img src="<%= member && member.id_user && member.id_user.photo ? member.id_user.photo : '/images/defaultProfile.png' %>">
                                </a>
                                <span class="member-name"><%= member && member.id_user ? member.id_user.firstName  : 'Default Name' %></span>
                            </div>
                        </div>                        
                    <% }); %>
                <% } else { %>
                    <p>No team members found.</p>
                <% } %>
                <img src="images/yourTeamBlue.svg" alt="Your Team Blue" class="team-background-homepage">
                <img src="images/blue_decoration.svg" alt="Decoration" class="team-background2-homepage">
            </div>
        </section>
    


        <!-- Tasks section -->
        <div class="tasks-section-homepage">
            <div class="cabecario-cards-homepage">
                <h2>Tasks</h2>
            </div>
            <button id="createTaskButton">+</button>
            <div id="taskList" class="task-list-homepage"></div>
        </div>

        <!-- Modal Overlay -->
        <div id="taskModal" class="modal-homepage">
            <div class="modal-content-homepage">
                <span class="close-homepage">&times;</span>
                <h2>Create a Task</h2>
                <form id="taskForm">
                    <label for="taskTitle">Title:</label>
                    <input type="text" id="taskTitle" name="taskTitle" required>
                    <br>
                    <label for="taskDescription">Description:</label>
                    <input type="text" id="taskDescription" name="taskDescription" required>
                    <br>
                    <button type="submit">Create a task</button>
                </form>
            </div>
        </div>

        <!-- Update Task Modal -->
        <div id="updateTaskModal" class="modal-homepage">
            <div class="modal-content-homepage">
                <span class="close-homepage">&times;</span>
                <h2>Update Task</h2>
                <form id="updateTaskForm">
                    <label for="updateTaskTitle">Title:</label>
                    <input type="text" id="updateTaskTitle" name="taskTitle" required>
                    <br>
                    <label for="updateTaskDescription">Description:</label>
                    <input type="text" id="updateTaskDescription" name="taskDescription" required>
                    <br>
                    <button type="submit">Update Task</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Get the modal
        var modal = document.getElementById("taskModal");
        var updateModal = document.getElementById("updateTaskModal");

        // Get the button that opens the modal
        var btn = document.getElementById("createTaskButton");
        var updateBtn;

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close-homepage")[0];

        // When the user clicks the button, open the modal 
        btn.onclick = function () {
            modal.style.display = "block";
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
            updateModal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal || event.target == updateModal) {
                modal.style.display = "none";
                updateModal.style.display = "none";
            }
        }

        // Create task
        document.getElementById('taskForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const title = document.getElementById('taskTitle').value;
            const description = document.getElementById('taskDescription').value;

            fetch('/task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: title, description: description, completed: false }),
            })
                .then(response => response.json())
                .then(task => {
                    addTaskToList(task);
                    modal.style.display = "none";
                })
                .catch(error => console.error('Error:', error));
        });

        // Update task
        document.getElementById('updateTaskForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const title = document.getElementById('updateTaskTitle').value;
            const description = document.getElementById('updateTaskDescription').value;
            const taskId = updateModal.getAttribute('data-task-id');

            fetch(`/task/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: title, description: description }),
            })
                .then(response => response.json())
                .then(updatedTask => {
                    updateTaskInList(updatedTask);
                    updateModal.style.display = "none";
                })
                .catch(error => console.error('Error:', error));
        });

        // Add task to the task list
        function addTaskToList(task) {
            const taskList = document.getElementById('taskList');
            const taskItem = document.createElement('div');
            taskItem.className = "task-item-homepage";
            taskItem.setAttribute("data-id", task.id);
            taskItem.innerHTML = `<div class="task-text"><strong>${task.name}</strong>: ${task.description}</div> <div class="button-delete-update"><button class="delete-task-button-homepage">Delete</button> <button class="update-task-button-homepage">Update</button></div>`;
            taskList.appendChild(taskItem);

            // Add event listener to the delete button
            taskItem.querySelector('.delete-task-button-homepage').addEventListener('click', function () {
                deleteTask(task.id);
            });
            taskItem.querySelector('.update-task-button-homepage').addEventListener('click', function () {
                openUpdateModal(task);
            });
        }

        function updateTaskInList(task) {
            const taskItem = document.querySelector(`.task-item-homepage[data-id='${task.id}']`);
            taskItem.innerHTML = `<div class="task-text"><strong>${task.name}</strong>: ${task.description}</div> <div class="button-delete-update"><button class="delete-task-button-homepage">Delete</button> <button class="update-task-button-homepage">Update</button></div>`;

            taskItem.querySelector('.delete-task-button-homepage').addEventListener('click', function () {
                deleteTask(task.id);
            });

            taskItem.querySelector('.update-task-button-homepage').addEventListener('click', function () {
                openUpdateModal(task);
            });
        }

        function openUpdateModal(task) {
            document.getElementById('updateTaskTitle').value = task.name;
            document.getElementById('updateTaskDescription').value = task.description;
            updateModal.setAttribute('data-task-id', task.id);
            updateModal.style.display = "block";
        }

        // Delete task
        function deleteTask(taskId) {
            const taskItem = document.querySelector(`.task-item-homepage[data-id='${taskId}']`);
            taskItem.remove();
            fetch(`/task/${taskId}`, {
                method: 'DELETE',
            })
            .catch(error => console.error('Error:', error));
        }

        // Load tasks when the page loads
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/task')
                .then(response => response.json())
                .then(tasks => {
                    tasks.forEach(task => addTaskToList(task));
                })
                .catch(error => console.error('Error:', error));
        });

        // Adjust the slider value manually
        const slider = document.getElementById('customRange');
        const averageHappiness = parseFloat(slider.value);

        if (!isNaN(averageHappiness)) {
            slider.value = averageHappiness.toFixed(1);
        }
    </script>
</body>

</html>
